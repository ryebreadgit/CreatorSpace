<!DOCTYPE html>
<html>
<head>
    <title>Library Management - CreatorSpace</title>
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <link rel="stylesheet" href="/assets/lib/bootstrap-5.3.0-alpha3-dist/css/bootstrap.min.css">
    <link href="/assets/lib/bootstrap-icons-1.10.5/font/bootstrap-icons.css" rel="stylesheet">

    <script src="/assets/lib/bootstrap-5.3.0-alpha3-dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" type="text/css" href="/assets/css/styles.css" />
    <link rel="stylesheet" type="text/css" href="/assets/css/videos.css">

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="CreatorSpace is a tool to archive and watch your favorite creators. Add to or view your current collection of videos.">
    <meta name="keywords" content="creator, archive, youtube, twitch, video, collection, watch">
    <meta name="author" content="CreatorSpace">
    <meta property="og:image" content="{{.ServerPath}}/assets/img/banner.png">
    <style>
        .table td {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 150px; /* Adjust this value based on your preference */
        }
    </style>
</head>

<body>
    {{ template "navbar.tmpl" . }}
    <div class="container mt-4">
        <span style="float: right;"><button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#importModal">Import Library</button></span>
        <!-- List All Creators -->
        <h2 class="text-white" style="margin: 1.5rem 0;">Creators</h2>
        <table class="table table-dark table-hover" style="align-items: center; justify-content: center; text-align: center;">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Video Count</th>
                    <th>Platform</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {{ range .Creators }}
                <tr>
                    <td style="text-align: left;"><img style="max-height: 25px; padding: 0.25rem;" src="/api/youtube/creators/{{.ChannelID}}/thumbnail" alt="{{.Name}}" />{{ .Name }}</td>
                    <td>{{.VideoCount}}</td>
                    <td>{{ .Platform }}</td>
                    <td>
                        <button class="btn btn-primary btn-sm" onclick="fetchVideos('{{ .ChannelID }}');" title="View Videos"><i class="bi bi-eye"></i> </button>
                        <button class="btn btn-primary btn-sm" onclick="editCreator('{{ .ChannelID }}');" title="Edit"><i class="bi bi-pencil"></i> </button>
                    <button class="btn btn-danger btn-sm" onclick="deleteCreator('{{ .ChannelID }}', '{{.Name}}');" title="Delete"><i class="bi bi-trash"></i></button>
                    </td>
                </tr>
                {{ end }}
            </tbody>
        </table>

        <!-- Video Modal -->
    <div class="modal" id="videoModal" tabindex="-1" aria-labelledby="videoModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="videoModalLabel">Video Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Video details will be populated here dynamically -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="prevPage();">Previous</button>
                    <button type="button" class="btn btn-secondary" onclick="nextPage();">Next</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete modal -->
    <div class="modal" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Delete Video</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- details will be populated here dynamically -->
                </div>
            </div>
        </div>
    </div>

    <!-- Edit modal -->

    <div class="modal" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Edit Video</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- details will be populated here dynamically -->
                </div>
            </div>
        </div>
    </div>

    <!-- Import modal -->

    <div class="modal" id="importModal" tabindex="-1" aria-labelledby="importModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="importModalLabel">Import Library</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <h5>Import library from local folder</h5>
                    <p class="text-muted">This will automatically crawl the given folder for any YouTube video ids between '[]', '()', or '{}', check for any metadata, and attempt to import ids not found into the database. Currently to view videos the videos must be in the CreatorSpace folder structure and in the Base YouTube Path set in Server Management. Files will not be moved to the YouTube folder by default but can be organized into the CreatorSpace folder structure.</p>
                    <input type="text" id="importFolder" name="importFolder" placeholder="Local Folder to import" value="{{.BaseYTPath}}" style="width: 100%;">
                    <br />
                    <br />
                    <span class="text-danger">Warning: This is only required for new installs where the folder structure is different than the default CreatorSpace.</span>
                    <label for="importMoveFolderStructure"></label>Move files to correct folder structure? </label>
                    <input type="checkbox" id="importMoveFolderStructure" name="importMoveFolderStructure" style="margin:0 0.5rem;">
                    <br />
                    <br />
                    <button class="btn btn-primary" onclick="importLibrary();">Import</button>
                    <p></p>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentPage = 1;
        let lastPage = 1;
        let currentChannelID = '';

        const videoModal = new bootstrap.Modal(document.getElementById('videoModal'));
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
        const editModal = new bootstrap.Modal(document.getElementById('editModal'));
        const importModal = new bootstrap.Modal(document.getElementById('importModal'));

        function fetchVideos(creatorId) {
            // Set the currentChannelID to the provided creatorId
            currentChannelID = creatorId;
            // Reset the currentPage to 1 each time we fetch videos for a new channel
            currentPage = 1;
            fetchAndDisplayVideos(currentChannelID);
        }

        function fetchAndDisplayVideos(creatorId) {
            if (creatorId === undefined) {
                return;
            }
            fetch(`/api/creators/${creatorId}/videos?page=${currentPage}`)
            .then(response => response.json())
            .then(data => {
                if (data.err !== undefined) {
                    alert(`Error displaying videos: ${data.err}`);
                    currentPage = lastPage;
                    return;
                }
                let videoDetailsHtml = '<table class="table table-bordered">';
                videoDetailsHtml += '<thead><tr><th>Title</th><th>Published At</th><th>Actions</th></tr></thead><tbody>';
                data.data.forEach(video => {
                    let escapedTitle = video.Title.replace(/'/g, "\\'");
                    videoDetailsHtml += `
                        <tr>    
                            <td><img src="/api/media/${video.VideoID}/thumbnail" alt="${video.Title}" style="max-height: 25px; padding: 0.25rem;"> ${video.Title}</td>
                            <td>${video.PublishedAt}</td>
                            <td>
                                <button class="btn btn-primary btn-sm" onclick="editVideo('${video.VideoID}');" title="Edit"><i class="bi bi-pencil"></i> </button>
                                <button class="btn btn-danger btn-sm" onclick="deleteVideo('${video.VideoID}', '${escapedTitle}')" title="Delete"><i class="bi bi-trash"></i></button>
                            </td>
                        </tr>
                    `;
                });
                videoDetailsHtml += '</tbody></table>';
                document.querySelector('.modal-body').innerHTML = videoDetailsHtml;

                // If the data.data count is less than 20, remove the next button
                if (data.data.length < 20) {
                    document.querySelector('.modal-footer .btn-secondary:last-child').style.display = 'none';
                } else {
                    document.querySelector('.modal-footer .btn-secondary:last-child').style.display = 'block';
                }

                // If the currentPage is 1, remove the previous button
                if (currentPage === 1) {
                    document.querySelector('.modal-footer .btn-secondary:first-child').style.display = 'none';
                } else {
                    document.querySelector('.modal-footer .btn-secondary:first-child').style.display = 'block';
                }

                videoModal.show();
            });
        }

        function nextPage() {
            lastPage = currentPage;
            currentPage++;
            fetchAndDisplayVideos(currentChannelID);
        }

        function prevPage() {
            if (currentPage > 1) {
                lastPage = currentPage;
                currentPage--;
                fetchAndDisplayVideos(currentChannelID);
            }
        }

        function deleteVideo(videoID, videoTitle) {
            // Hide current modal
            videoModal.hide();
            // Set the delete modal title
            document.querySelector('#deleteModalLabel').innerHTML = `Delete Video: ${videoTitle}`;
            // Set the delete modal body
            document.querySelector('#deleteModal .modal-body').innerHTML = `
                <center><h4>${videoTitle}</h4></center>
                <br>
                <p>Are you sure you want to delete this video?</p>
                <input type="radio" id="deleteVideoKeep" name="deleteVideo">
                <label for="deleteVideoKeep">Delete from Disk? (WARNING: THIS ACTION IS IRREVERSIBLE)</label>
                <br>
                <br>

                <button class="btn btn-danger" onclick="deleteVideoConfirm('${videoID}');">Delete</button>
                <button class="btn btn-secondary" data-bs-dismiss="modal" onclick="videoModal.show();">Cancel</button>
            `;
            // Show the delete modal
            deleteModal.show();
        }

        function deleteVideoConfirm(videoID) {
            // Get the value of the radio button
            const deleteVideoKeep = document.querySelector('#deleteVideoKeep').checked;
            // Hide the delete modal
            deleteModal.hide();
            // Send the delete request
            fetch(`/api/media/${videoID}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    DeleteFile: deleteVideoKeep
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.err !== undefined) {
                    alert(`Error deleting video: ${data.err}`);
                    return;
                }
                // Refresh the video modal
                fetchAndDisplayVideos(currentChannelID);
            });
        }

        function deleteCreator(creatorId, creatorTitle) {
            // Set the currentChannelID to the provided creatorId
            currentChannelID = creatorId;
            // Set the delete modal title
            document.querySelector('#deleteModalLabel').innerHTML = `Delete Creator: ${creatorTitle}`;
            // Set the delete modal body
            document.querySelector('#deleteModal .modal-body').innerHTML = `
                <center><h4>${creatorTitle}</h4></center>
                <br>
                <p>Are you sure you want to delete this creator?</p>
                <input type="radio" id="deleteCreatorKeep" name="deleteCreator">
                <label for="deleteCreatorKeep">Delete all videos from Disk? (WARNING: THIS ACTION IS IRREVERSIBLE)</label>
                <br>
                <br>

                <button class="btn btn-danger" onclick="deleteCreatorConfirm('${creatorId}');">Delete</button>
                <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            `;
            // Show the delete modal
            deleteModal.show();
        }

        function deleteCreatorConfirm(creatorId) {
            // Get the value of the radio button
            const deleteCreatorKeep = document.querySelector('#deleteCreatorKeep').checked;
            // Hide the delete modal
            deleteModal.hide();
            // Send the delete request
            fetch(`/api/creators/${creatorId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    DeleteFiles: deleteCreatorKeep
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.err !== undefined) {
                    alert(`Error deleting creator: ${data.err}`);
                    return;
                }
                // Refresh the page
                window.location.reload();
            });
        }

        function editVideo(videoID) {
            // Get the video details
            fetch(`/api/youtube/metadata/${videoID}`, {
                method: 'GET',
            })
            .then(response => response.json())
            .then(data => {
                if (data.err !== undefined) {
                    alert(`Error editing video: ${data.err}`);
                    return;
                }

                let safeTitle = data.data.Title.replace(/'/g, "\\'");
                let safeDesc = data.data.Description.replace(/'/g, "\\'");
                // Hide current modal
                videoModal.hide();
                // Set the edit modal title
                document.querySelector('#editModalLabel').innerHTML = `Edit Video: ${safeTitle}`;
                // Set the edit modal body
                document.querySelector('#editModal .modal-body').innerHTML = `
                    <center><h4>${safeTitle}</h4></center>
                    <br>
                    <table class="table table-bordered">
                        <tr>
                            <td>Title</td>
                            <td><input type="text" id="editVideoTitle" name="editVideoTitle" value='${safeTitle}' style="width: 100%;"></td>
                        </tr>
                        <tr>
                            <td>Channel ID</td>
                            <td><input type="text" id="editVideoDescription" name="editVideoDescription" value='${data.data.ChannelID}' style="width: 100%;"></td>
                        </tr>
                    </table>
                `;
                // Show the edit modal
                editModal.show();
            });
        }

        function editVideoConfirm(videoID) {
            // Get the value of the radio button
            const editVideoTitle = document.querySelector('#editVideoTitle').value;
            const editVideoDescription = document.querySelector('#editVideoDescription').value;
            const editVideoChannelId = document.querySelector('#editVideoChannelId').value;
            // Hide the edit modal
            editModal.hide();
            // Send the edit request
            fetch(`/api/media/${videoID}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    Title: editVideoTitle,
                    Description: editVideoDescription,
                    ChannelID: editVideoChannelId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.err !== undefined) {
                    alert(`Error editing video: ${data.err}`);
                    return;
                }
                // Refresh the video modal
                fetchAndDisplayVideos(currentChannelID);
            });
        }

        function editCreator(channelID) {
            // Get the channel details
            fetch(`/api/youtube/creators/${channelID}`, {
                method: 'GET',
            })
            .then(response => response.json())
            .then(data => {
                if (data.err !== undefined) {
                    alert(`Error editing channel: ${data.err}`);
                    return;
                }

                let safeTitle = data.data.Name.replace(/'/g, "\\'");
                // Hide current modal
                videoModal.hide();
                // Set the edit modal title
                document.querySelector('#editModalLabel').innerHTML = `Edit Channel: ${safeTitle}`;
                // Set the edit modal body
                document.querySelector('#editModal .modal-body').innerHTML = `
                    <center><h4>${safeTitle}</h4></center>
                    <br>
                    <table class="table table-bordered">
                        <tr>
                            <td>Name</td>
                            <td><input type="text" id="editCreatorName" name="editCreatorName" value='${safeTitle}' style="width: 100%;"></td>
                        </tr>
                    </table>
                `;
                // Show the edit modal
                editModal.show();
            });
        }

        function editCreatorConfirm(channelID) {
            // Get the value of the radio button
            const editCreatorName = document.querySelector('#editCreatorName').value;
            // Hide the edit modal
            editModal.hide();
            // Send the edit request
            fetch(`/api/creators/${channelID}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    Name: editCreatorName
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.err !== undefined) {
                    alert(`Error editing channel: ${data.err}`);
                    return;
                }
                // Refresh the page
                window.location.reload();
            });
        }


        function importLibrary() {
            // Get the value of the radio button
            const importFolder = document.querySelector('#importFolder').value;
            const importAddCreators = document.querySelector('#importMoveFolderStructure').checked;
            // Hide the edit modal
            importModal.hide();
            // Send the edit request
            fetch(`/api/library/import`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ImportFolder: importFolder,
                    AddCreators: importAddCreators
                })
            })
            .catch(err => {
                alert(`Error importing library: Error sending request to api '${err}'`);
            })
            .then(response => response.json())
            .catch(err => {
                alert(`Error importing library: Non-json response from api '${err}'`);
            })
            .then(data => {
                if (data.err !== undefined) {
                    alert(`Error importing library: ${data.err}`);
                    return;
                }
                // Refresh the page
                window.location.reload();
            }
            );
        }
    </script>
</body>
</html>